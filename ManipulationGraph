import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;

import java.util.Random;


public class ManipulationGraph {

    // Graphique avec lequel on travail
    Graph graph =  new SingleGraph("TEST");;

    protected String styleSheet =
            "node {" +
                    "	fill-color: white;" +
                    "}" +
                    "node.marked {" +
                    "	fill-color: red;" +
                    "}";

    // Fonction de création de graphe
    public void createGraph(){

        graph.setAttribute("ui.stylesheet", styleSheet);

        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("E");
        graph.addNode("F");
        graph.addNode("G");
        graph.addNode("H");
        graph.addNode("I");
        graph.addNode("J");
        graph.addNode("K");
        graph.addNode("L");
        graph.addNode("M");
        graph.addEdge("AB", "A", "B");
        graph.addEdge("BC", "B", "C");
        graph.addEdge("BD", "B", "D");
        graph.addEdge("CE", "C", "E");
        graph.addEdge("CF", "C", "F");
        graph.addEdge("DE", "D", "E");
        graph.addEdge("DF", "D", "F");
        graph.addEdge("EF", "E", "F");
        graph.addEdge("EG", "E", "G");
        graph.addEdge("FG", "F", "G");
        graph.addEdge("FH", "F", "H");
        graph.addEdge("HI", "H", "I");
        graph.addEdge("GJ", "G", "J");
        graph.addEdge("GH", "G", "H");
        graph.addEdge("JK", "J", "K");
        graph.addEdge("JL", "J", "L");
        graph.addEdge("JM", "J", "M");
        graph.addEdge("KL", "K", "L");
        graph.addEdge("LM", "L", "M");
        for (Node node : graph) {
            node.setAttribute("ui.label", node.getId());
        }

        graph.display();
    }


    public void test(){
        // Déclare un objet de nom noeudCourant et de classe//type Node
        Node noeudCourant;
        // Associe un noeud du graph a la variable NoeudCourant
        noeudCourant = graph.getNode("B");

        // recupere un tableau des noeuds voisins au noeud courant
        Node[] tableauVoisin = noeudCourant.neighborNodes().toArray(Node[]::new);

        // combien il y a til de voisin
        int taillTableau = tableauVoisin.length;

        // on fait une boucle de la taille du nombre de voisin
        for (int i = 0; i < taillTableau ; i = i + 1) {
            // affiche les voisins un part un
            System.out.println("voisin numero " + i +" "+ tableauVoisin[i].getId());
        }

        // Crée un objet ran de type//classe Random
        Random ran ;
        ran = new Random();
        int next;
        for (int j = 0; j < 10; j++) {
            // renvoie un entier entre 0 - 9
             next = ran.nextInt(10);
             System.out.println(next);
        }





    }

    /** Se balader dans le graph de noeud en noeud en suivant les liens
     *
     * @param nbStep
     */
    public void randomWalk(int nbStep){

        Random ran = new Random();
        String chemin = "";
        Node noeudCourant = graph.getNode("A");


        // tableau qui contiendra les voisins du noeud courant
        Node[] tableauVoisin;
        // Tableau des noeuds qui ont déja été visité
        Node[] noeudDejaVu = new Node[graph.getNodeCount()];
        Node[] voisinNonVu;
        int index = 0;

        for (int j = 0; j < nbStep; j++) {
            chemin += "->" + (noeudCourant.getId());
            noeudDejaVu[index] = noeudCourant;
            index = index + 1;

            // recupere un tableau des noeuds voisins au noeud courant
            tableauVoisin = noeudCourant.neighborNodes().toArray(Node[]::new);
            // combien il y a til de voisin
            int taillTableau = tableauVoisin.length;
            // tableau vide des voisins qui n'ont pas encore été visité
            voisinNonVu = new Node[taillTableau];
            int indexNonVu = 0;
            boolean nouveau ;
            // Filtrer les voisins du noeud courant pour ne garder que les voisins pas encore vu
            for (int i = 0; i < tableauVoisin.length; i++) {
                nouveau = true;
                for (int k = 0; k < noeudDejaVu.length; k++) {
                    if(tableauVoisin[i] == noeudDejaVu[k]){
                        nouveau = false;
                    }

                }

                // si nouveau = true ca veut dire que le noeud n'a pas été vu
                if(nouveau) {
                    voisinNonVu[indexNonVu] = tableauVoisin[i];
                    indexNonVu = indexNonVu + 1;
                }
            }

            System.out.println();

            System.out.println("Affichage des voisins du noeuds "+ noeudCourant.getId());
            // on fait une boucle de la taille du nombre de voisin
            for (int i = 0; i < voisinNonVu.length ; i = i + 1) {
                // affiche les voisins un part un
                System.out.println("voisin numero " + i +" "+ voisinNonVu[i].getId());
            }
            // Choix aléatoire d'un entier avec comme max la taille du tableau
            int aleatoire =  ran.nextInt( voisinNonVu.length);
            // Recupere le noeud situé a l'index numero "aléatoire"
            Node unNoeud = voisinNonVu[aleatoire];
            System.out.println("On va se déplacer au noeud "+unNoeud.getId());
            noeudCourant = unNoeud;
        }

        System.out.println(chemin);
    }


    /** Fonction qui va trier le tableau en parametre
     * 
     * @param entree tableau en entrée
     * @param croissant boolean qui décide si le tableau doit etre trié
     *                  en ordre croissant
     * @return un tableau trié en ordre croissant ou décroissant
     */
    public int[] triTableau(int[] entree, boolean croissant){
        
        
    }
}
